// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: member.sql

package postgres

import (
	"context"
)

const getMemberByEmail = `-- name: GetMemberByEmail :one
SELECT id, name, email, password, address
FROM tb_amole_member WHERE email = $1
`

func (q *Queries) GetMemberByEmail(ctx context.Context, email string) (TbAmoleMember, error) {
	row := q.db.QueryRow(ctx, getMemberByEmail, email)
	var i TbAmoleMember
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Address,
	)
	return i, err
}

const getMemberById = `-- name: GetMemberById :one
SELECT id, name, email, password, address
FROM tb_amole_member WHERE id = $1
`

func (q *Queries) GetMemberById(ctx context.Context, id int64) (TbAmoleMember, error) {
	row := q.db.QueryRow(ctx, getMemberById, id)
	var i TbAmoleMember
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Address,
	)
	return i, err
}

const insertMember = `-- name: InsertMember :exec
INSERT INTO public.tb_amole_member
("name", email, "password", address)
VALUES($1, $2, $3, $4)
`

type InsertMemberParams struct {
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
	Address  string `json:"address"`
}

func (q *Queries) InsertMember(ctx context.Context, arg InsertMemberParams) error {
	_, err := q.db.Exec(ctx, insertMember,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.Address,
	)
	return err
}
